//Check if student passes the course
CREATE OR REPLACE FUNCTION check_grade()
    RETURNS TRIGGER AS $$ BEGIN
    IF NEW.grade = 'f' THEN
        RETURN NULL;
    ELSE
        RETURN NEW
    END IF
    END;
    $$LANGUAGE plpgsql

CREATE TRIGGER check()
BEFORE INSERT OR UPDATE on TakenCourses
FOR EACH ROW EXECUTE PROCEDURE check_grade()

//Check if student has exceed the maximum number of courses he can
//Based on current ER Diagram STUDENT - COURSES r/s is ENTER and TAKEN
//Check the academic year and semester too ?
//This could be enforced with column/ table constraint?
CREATE OR REPLACE FUNCTION check_maxCourse()
    RETURNS TRIGGER AS $$ BEGIN
    WITH numCourseTaken AS
    (SELECT    sid, COUNT(sid) as count
     FROM      taken
     GROUP BY  sid)

     IF (SELECT count FROM numCourseTaken WHERE numCourseTaken = NEW.sid) >= 4
         THEN RETURN NULL;
     END IF;

     RETURN NEW;
     END;
    $$LANGUAGE plpgsql
CREATE TRIGGER maxCourse()
BEFORE INSERT OR UPDATE ON TakingCourses
FOR EACH ROW
EXECUTE PROCEDURE check_maxCourse()

/*  Once a student's request to be a TA for a module is accepted, 
    remove all of that student's other requests to be a TA for other modules
    This is to prevent student from being more than 1 TA per semester
    (not good for studies -_-") */
CREATE OR REPLACE FUNCTION remove_requests()
    RETURNS TRIGGER AS 
    $$ BEGIN
        DELETE FROM PossibleTA WHERE sid=NEW.sid AND cid<>NEW.cid;
     END; $$
    LANGUAGE plpgsql
CREATE TRIGGER remove_requests_trigger()
AFTER INSERT ON TeachingAssistants
FOR EACH ROW
EXECUTE PROCEDURE remove_requests()
