/*Function: Show the number of students of each grade for each module*/
WITH courseid 
     AS (SELECT * 
         FROM   takencourses), 
     grade 
     AS (SELECT cid, 
                grade, 
                Count(courseid.grade) 
         FROM   (SELECT * 
                 FROM   takencourses) AS courseid 
         GROUP  BY courseid.grade, 
                   courseid.cid) 
SELECT * FROM   grade;

/* Function: Display the average grade received by students for a module in a particular semester */ 
With studentGrades(sid, cid, year,sem, grade) AS
(SELECT sid, cid, year, sem, CASE 
	WHEN grade = 'A+' then 5.0
	WHEN grade = 'A'  then 5.0
	WHEN grade = 'A-' then 4.5
	WHEN grade = 'B+' then 4.0
	WHEN grade = 'B'  then 3.5
	WHEN grade = 'B-' then 3.0
	WHEN grade = 'C+' then 2.5
	WHEN grade = 'D+' then 1.5
	WHEN grade = 'D'  then 1.0
	WHEN grade = 'F'  then 0
    
END AS numGrade
FROM takencourses
WHERE grade IS NOT NULL
GROUP BY sid,cid, year, sem),

AverageGPA as (
	SELECT cid, year, sem, ROUND(AVG(grade),4) as GPA
	FROM studentGrades
	WHERE cid = 'BU41007'
	GROUP BY cid, year, sem
)
select cid,year,sem, coalesce(GPA,0.0) as GPA from AverageGPA;

/* Function: Check ratings given by the student on a course taught by particular professor */
With courseRating(cid, year, sem, rating) AS (
SELECT cid, year, sem, SUM(rating) / count(rating) AS rating
FROM takencourses
WHERE is_rated = 1
GROUP BY cid, year, sem
)

SELECT P.pid, P.cid, CR.year, CR.sem, CR.rating
FROM professors AS LEFT JOIN courseRating as CR ON P.cid = CR.cid



/* This query identifies for each forum, students who have posted at least n times (set to 5 in this example) in the forum,
and ranks the students first by average ranking of their posts across the forum, 
then by the total number of their posts across the forum. 
Thereafter, students with the top k (set to 3 in this example) [ranking, total posts] pair are selected.
i.e. More than k students may be selected if some students share same ranking and total posts.
Final result is a table with attributes (fid, ranking, id, forum_rating, total_posts) */
WITH FindTotalRatingAndPosts AS (
	SELECT P.fid, P.id, ROUND(AVG(post_rating), 2) forum_rating, TP.total total_posts
	FROM Forums F, Threads T, (
			SELECT P.id, P.fid, P.tid, P.post_num, ROUND(AVG(rating), 2) post_rating
			FROM Ratings R RIGHT JOIN Posts P
			ON R.fid = P.fid AND R.tid = P.tid AND R.post_num = P.post_num
			WHERE P.id IN (SELECT sid FROM Students)
			GROUP BY P.id, P.fid, P.tid, P.post_num
		) P, (
			SELECT P.id, P.fid, COUNT(*) total
			FROM Forums F, Threads T, Posts P
			WHERE F.fid = T.fid AND T.fid = P.fid AND T.tid = P.tid
				AND P.id IN (SELECT sid FROM Students)
			GROUP BY P.id, P.fid
		) TP
	WHERE F.fid = T.fid and T.fid = P.fid AND T.tid = P.tid 
		AND P.fid = TP.fid AND P.id = TP.id AND post_rating IS NOT NULL
	GROUP BY P.fid, P.id, total_posts
	HAVING TP.total >= 5
), RankPosts AS (
	SELECT *, RANK() OVER (
		PARTITION BY fid ORDER BY forum_rating DESC, total_posts DESC
	) ranking
	FROM (
		SELECT DISTINCT fid, forum_rating, total_posts FROM FindTotalRatingAndPosts
		ORDER BY fid, forum_rating DESC, total_posts DESC
	) TopDistinct
)
SELECT fid, ranking, id, forum_rating, total_posts
FROM FindTotalRatingAndPosts NATURAL JOIN RankPosts
WHERE ranking <= 3
ORDER BY fid, ranking, id;
